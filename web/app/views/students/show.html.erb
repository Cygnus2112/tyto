<div class="row button-header">
  <ul id="filters" class="button-group">
    <li><a data-filter="*" href="#" class="button small">Show all</a></li>
    <li><a data-filter=".complete" href="#" class="button small">Complete</a></li>
    <li><a data-filter=".incomplete" href="#" class="button small">Incomplete</a></li>
  </ul>
</div>
<div class="body-container">
  <div class="row" data-equalizer>
    <div class="small-12 medium-9 large-10 columns">
      <ul class="small-block-grid-1 medium-block-grid-2 large-block-grid-3 isotope-container">
        <% @assignments.each do |assignment| %>
          <li class="assignment-li <% if !assignment.complete %>in<% end %>complete" data-equalizer-watch>
            <%= link_to tyto_assignment_path(assignment.id) do %>
              <div class="assignment-container <% if assignment.complete %>green<% end %>">
                <p class="course-name"><%= assignment.course_name %></p>
                <p class="assignment-name"><%= assignment.name %></p>
                <p class="questions-complete"><%= assignment.questions_answered %>/<%= assignment.assignment_size %></p>
                <div class="progress small-12 success round">
                  <span class="meter" style="width: <%= [assignment.proficiency, 1].min * 100 %>%"></span>
                </div>
              </div>
            <% end %>
          </li>
        <% end %>
      </ul>
    </div>
    <div class="small-12 medium-3 large-2 columns">
      <% @classrooms.each do |classroom| %>
        <p><%= classroom.name %></p>
      <% end %>
      <div id="invite-container"></div>
    </div>
  </div>
</div>


<script src="http://fb.me/JSXTransformer-0.10.0.js"></script>
<script type="text/jsx">
/** @jsx React.DOM **/
(function () {
  var InviteList = React.createClass({
    getInitialState: function() {
      return {data: []};
    },
    componentWillMount: function() {
      $.ajax({
        url: this.props.url,
        dataType: 'json',
        success: function(data) {
          this.setState({data: data});
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    },
    handleInviteSubmit: function(data) {
      $.ajax({
        type: "PATCH",
        url: data.url,
        dataType: 'json'
      });
      this.componentWillMount();
    },
    render: function() {
      var inviteList = this;
      console.log(inviteList.handleInviteSubmit);
      var inviteNodes = this.state.data.map(function (invite) {
        return <Invite onInviteSubmit={inviteList.handleInviteSubmit} key={invite.id} courseName={invite.course_name} teacherName={invite.teacher_name}></Invite>
      });
      return (
        <div className="invite-box">
          {inviteNodes}
        </div>
      );
    }
  });
  var Invite = React.createClass({
    handleAccept: function(e) {
      e.preventDefault();
      var url = "/invites/" + this.props.key;
      this.props.onInviteSubmit({url: url, accept: true});
    },
    render: function() {
      return (
        <div className="invite">
          <p className="inviteCourseName">
            {this.props.courseName}
          </p>
          <p className="inviteTeacherName">
            {this.props.teacherName}
          </p>
          <form className="acceptInviteButton" onSubmit={this.handleAccept}>
            <input type="submit" className="button" value="Accept" />
          </form>
        </div>
      );
    }
  });
  React.renderComponent(
    <InviteList url="/invites"/>,
    document.getElementById('invite-container')
  );
})();
</script>
